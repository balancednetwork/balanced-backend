name: release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release-please.outputs.release_created }}
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/release-please-action@v3
        id: release-please
        with:
          release-type: python
          extra-files: |
            balanced_backend/config.py

  test:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install deps
        run: |
          pip3 install \
            -r requirements-api.txt \
            -r requirements-cron.txt \
            -r requirements-dev.txt
#          sudo apt-get install librdkafka-dev
#            -r requirements-streaming.txt \

      - name: Bring up stack
        run: make up-dbs && sleep 30

      - name: Check stack
        run: make ps

      - name: Run tests with coverage
        run: make test-coverage

      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.release.outputs.release_created }}
    outputs:
      tag: ${{ steps.source.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: last
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag name
        id: source
        run: |
          echo ::set-output name=TAG::${{ steps.last.outputs.release }}-${{ github.run_number }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: prod
          push: true
          build-args: |
            SERVICE_NAME=api
          tags: balancednetwork/balanced-backend-api:latest, balancednetwork/balanced-backend-api:${{ steps.source.outputs.TAG }}

      - name: Build and push cron
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          target: prod
          push: true
          build-args: |
            SERVICE_NAME=cron
          tags: balancednetwork/balanced-backend-cron:latest, balancednetwork/balanced-backend-cron:${{ steps.source.outputs.TAG }}

  push_refs:
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ needs.release.outputs.release_created }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - cluster: prod-ams
            network_name: mainnet

    steps:
      - name: Checkout charts repo
        uses: actions/checkout@v2
        with:
          repository: balancednetwork/balanced-community-infra
          ref: main
          path: charts
          token: ${{ secrets.INFRA_DEPLOYMENT_PAT }}

      - name: Update API ${{ matrix.cluster }}/${{ matrix.network_name }} deployment values file
        uses: fjogeleit/yaml-update-action@master
        with:
          workDir: charts
          repository: balancednetwork/balanced-community-infra
          valueFile: 'deployments/${{ matrix.cluster }}/${{ matrix.network_name }}/backend-v2/tags.yaml'
          propertyPath: 'api.image.tag'
          value: ${{needs.docker.outputs.tag}}
          branch: main
          createPR: 'false'
          updateFile: true
          commitChange: false

      - name: Update worker ${{ matrix.cluster }}/${{ matrix.network_name }} deployment values file
        uses: fjogeleit/yaml-update-action@master
        with:
          workDir: charts
          repository: balancednetwork/balanced-community-infra
          valueFile: 'deployments/${{ matrix.cluster }}/${{ matrix.network_name }}/backend-v2/tags.yaml'
          propertyPath: 'worker.image.tag'
          value: ${{needs.docker.outputs.tag}}
          branch: main
          createPR: 'false'
          updateFile: true
          message: "backend-v2 ${{ matrix.cluster }}/${{ matrix.network_name }} deployment image version to ${{needs.docker.outputs.tag}}"
          token: '${{ secrets.INFRA_DEPLOYMENT_PAT }}'
